#!/bin/bash

set -ouex pipefail

### Install packages

# Packages can be installed from any enabled yum repo on the image.
# RPMfusion repos are available by default in ublue main images
# List of rpmfusion packages can be found here:
# https://mirrors.rpmfusion.org/mirrorlist?path=free/fedora/updates/39/x86_64/repoview/index.html&protocol=https&redirect=1

# this installs a package from fedora repos

#install packages for dolphin shortcuts
dnf5 install -y jpegoptim optipng pandoc qpdf recoll  xclip expect

#microsoft fonts install
dnf5 install -y mscore-fonts-all 

#for phone integration via usb
dnf5 -y copr enable zeno/scrcpy
dnf5 install -y scrcpy 
dnf5 -y copr disable zeno/scrcpy

#copr install webapp manager from bazzite
dnf5 -y copr enable bazzite-org/webapp-manager
dnf5 -y install webapp-manager 
dnf5 -y copr disable bazzite-org/webapp-manager

#copr install kde-kup for backups
#dnf5 -y copr enable justinz/kup
#dnf5 install kde-kup
#dnf5 -y copr disable justinz/kup

# Use a COPR Example:
#
# dnf5 -y copr enable ublue-os/staging
# dnf5 -y install package
# Disable COPRs so they don't end up enabled on the final image:
# dnf5 -y copr disable ublue-os/staging

#install specific brother printers
rm /opt
mkdir /opt
mkdir /tmp/rpms
curl --retry 3 -Lo /tmp/rpms/mfcl2710dwpdrv-4.0.0-1.i386.rpm "https://download.brother.com/welcome/dlf103525/mfcl2710dwpdrv-4.0.0-1.i386.rpm"
curl --retry 3 -Lo /tmp/rpms/brscan4-0.4.11-1.x86_64.rpm "https://download.brother.com/welcome/dlf105203/brscan4-0.4.11-1.x86_64.rpm"
curl --retry 3 -Lo /tmp/rpms/brscan-skey-0.3.2-0.x86_64.rpm "https://download.brother.com/welcome/dlf006650/brscan-skey-0.3.2-0.x86_64.rpm"
curl --retry 3 -Lo /tmp/rpms/brother-udev-rule-type1-1.0.2-0.noarch.rpm "https://download.brother.com/welcome/dlf103900/brother-udev-rule-type1-1.0.2-0.noarch.rpm"
curl --retry 3 -Lo /tmp/rpms/brmfcfaxdrv-2.0.2-1.x86_64.rpm "https://download.brother.com/welcome/dlf105190/brmfcfaxdrv-2.0.2-1.x86_64.rpm"
dnf5 install -y /tmp/rpms/*
mv /opt /usr/share/factory
ln -s /var/opt /opt

# install dolphin helper scripts
cd /tmp
git clone https://github.com/cfgnunes/nautilus-scripts.git
cd nautilus-scripts
touch script.exp
echo "#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Apr 16 04:13:34 2025
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

#set force_conservative 0  ;# set to 1 to force conservative mode even if
			   # script wasn't run conservatively originally
#if {$force_conservative} {
#	set send_slow {1 .1}
#	proc send {ignore arg} {
#		sleep .1
#		exp_send -s -- $arg
#	}
#}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn bash install.sh
match_max 100000
expect -exact "Scripts installer.\r
\r
Select the options (<SPACE> to select, <UP/DOWN> to choose):\r
\r
\r
\r
\r
\r
\[6n"
send -- "\[59;1R"
expect -exact "\[?25l\[54;1H\[\[1;32m*\[0m\] \[7mInstall basic dependencies.\[27m\[55;1H\[\[1;32m*\[0m\] Install keyboard shortcuts.\[56;1H\[\[1;32m*\[0m\] Close the file manager to reload its configurations.\[57;1H\[ \] Choose script categories to install.\[58;1H\[ \] Preserve previous scripts."
send -- "\r"
expect eof
" >> script.exp
./script.exp

# edit gpu switching config to enable seamless hotplug
rm /etc/supergfxd.conf
touch /etc/supergfxd.conf
echo "{
“mode”: “Hybrid”,
“vfio_enable”: true,
“vfio_save”: false,
“always_reboot”: false,
“no_logind”: true,
“logout_timeout_s”: 60,
“hotplug_type”: “None”
}" >> /etc/supergfxd.conf

#### Example for enabling a System Unit File

systemctl enable podman.socket
systemctl enable supergfxd.service 
systemctl disable nvidia-persistenced
systemctl mask nvidia-persistenced

